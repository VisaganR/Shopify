{"ast":null,"code":"// import { CardElement, useElements, useStripe } from \"@stripe/react-stripe-js\";\n// import React, { useState } from \"react\";\n// import { Alert, Button, Col, Form, Row } from \"react-bootstrap\";\n// import { useSelector } from \"react-redux\";\n// import { useNavigate } from \"react-router-dom\";\n// import { useCreateOrderMutation } from \"../services/appApi\";\n\n// function CheckoutForm() {\n//     const stripe = useStripe();\n//     const elements = useElements();\n//     const user = useSelector((state) => state.user);\n//     const navigate = useNavigate();\n//     const [alertMessage, setAlertMessage] = useState(\"\");\n//     const [createOrder, { isLoading, isError, isSuccess }] = useCreateOrderMutation();\n//     const [country, setCountry] = useState(\"\");\n//     const [address, setAddress] = useState(\"\");\n//     const [paying, setPaying] = useState(false);\n\n//     async function handlePay(e) {\n//         e.preventDefault();\n//         if (!stripe || !elements || user.cart.count <= 0) return;\n//         setPaying(true);\n//         const { client_secret } = await fetch(\"http://localhost:8080/create-payment\", {\n//             method: \"POST\",\n//             headers: {\n//                 \"Content-Type\": \"application/json\",\n//                 Authorization: \"Bearer\",\n//             },\n//             body: JSON.stringify({ amount: user.cart.total }),\n//         }).then((res) => res.json());\n//         const { paymentIntent } = await stripe.confirmCardPayment(client_secret, {\n//             payment_method: {\n//                 card: elements.getElement(CardElement),\n//             },\n//         },{\n//                 stripeAccount: \"acct_1Om6b6SAi6aHEzxW\", // Optional: If confirming payment intent on behalf of a connected account\n//                 apiKey: 'sk_test_51Om6b6SAi6aHEzxWWEpHSbkmw99ick6m4MK9r3LtzGE8txtyuOtfFHzlFjzE7zgOkY8vmKVDnPfygXC6oxsHkHUR00EDQymUUz', // Your Stripe secret API key\n//             })\n\n//         setPaying(false);\n\n//         if (paymentIntent) {\n//             createOrder({ userId: user._id, cart: user.cart, address, country }).then((res) => {\n//                 if (!isLoading && !isError) {\n//                     setAlertMessage(`Payment ${paymentIntent.status}`);\n//                     setTimeout(() => {\n//                         navigate(\"/orders\");\n//                     }, 3000);\n//                 }\n//             });\n//         }\n//     }\n\n//     return (\n//         <Col className=\"cart-payment-container\">\n//             <Form onSubmit={handlePay}>\n//                 <Row>\n//                     {alertMessage && <Alert>{alertMessage}</Alert>}\n//                     <Col md={6}>\n//                         <Form.Group className=\"mb-3\">\n//                             <Form.Label>First Name</Form.Label>\n//                             <Form.Control type=\"text\" placeholder=\"First Name\" value={user.name} disabled />\n//                         </Form.Group>\n//                     </Col>\n//                     <Col md={6}>\n//                         <Form.Group className=\"mb-3\">\n//                             <Form.Label>Email</Form.Label>\n//                             <Form.Control type=\"text\" placeholder=\"Email\" value={user.email} disabled />\n//                         </Form.Group>\n//                     </Col>\n//                 </Row>\n//                 <Row>\n//                     <Col md={7}>\n//                         <Form.Group className=\"mb-3\">\n//                             <Form.Label>Address</Form.Label>\n//                             <Form.Control type=\"text\" placeholder=\"Address\" value={address} onChange={(e) => setAddress(e.target.value)} required />\n//                         </Form.Group>\n//                     </Col>\n//                     <Col md={5}>\n//                         <Form.Group className=\"mb-3\">\n//                             <Form.Label>Country</Form.Label>\n//                             <Form.Control type=\"text\" placeholder=\"Country\" value={country} onChange={(e) => setCountry(e.target.value)} required />\n//                         </Form.Group>\n//                     </Col>\n//                 </Row>\n//                 <label htmlFor=\"card-element\">Card</label>\n//                 <CardElement id=\"card-element\" />\n//                 <Button className=\"mt-3\" type=\"submit\" disabled={user.cart.count <= 0 || paying || isSuccess}>\n//                     {paying ? \"Processing...\" : \"Pay\"}\n//                 </Button>\n//             </Form>\n//         </Col>\n//     );\n// }\n\n// export default CheckoutForm;","map":{"version":3,"names":[],"sources":["C:/Users/91637/OneDrive/Desktop/E-commerce/frontend/src/components/CheckoutForm.js"],"sourcesContent":["// import { CardElement, useElements, useStripe } from \"@stripe/react-stripe-js\";\r\n// import React, { useState } from \"react\";\r\n// import { Alert, Button, Col, Form, Row } from \"react-bootstrap\";\r\n// import { useSelector } from \"react-redux\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { useCreateOrderMutation } from \"../services/appApi\";\r\n\r\n// function CheckoutForm() {\r\n//     const stripe = useStripe();\r\n//     const elements = useElements();\r\n//     const user = useSelector((state) => state.user);\r\n//     const navigate = useNavigate();\r\n//     const [alertMessage, setAlertMessage] = useState(\"\");\r\n//     const [createOrder, { isLoading, isError, isSuccess }] = useCreateOrderMutation();\r\n//     const [country, setCountry] = useState(\"\");\r\n//     const [address, setAddress] = useState(\"\");\r\n//     const [paying, setPaying] = useState(false);\r\n\r\n//     async function handlePay(e) {\r\n//         e.preventDefault();\r\n//         if (!stripe || !elements || user.cart.count <= 0) return;\r\n//         setPaying(true);\r\n//         const { client_secret } = await fetch(\"http://localhost:8080/create-payment\", {\r\n//             method: \"POST\",\r\n//             headers: {\r\n//                 \"Content-Type\": \"application/json\",\r\n//                 Authorization: \"Bearer\",\r\n//             },\r\n//             body: JSON.stringify({ amount: user.cart.total }),\r\n//         }).then((res) => res.json());\r\n//         const { paymentIntent } = await stripe.confirmCardPayment(client_secret, {\r\n//             payment_method: {\r\n//                 card: elements.getElement(CardElement),\r\n//             },\r\n//         },{\r\n//                 stripeAccount: \"acct_1Om6b6SAi6aHEzxW\", // Optional: If confirming payment intent on behalf of a connected account\r\n//                 apiKey: 'sk_test_51Om6b6SAi6aHEzxWWEpHSbkmw99ick6m4MK9r3LtzGE8txtyuOtfFHzlFjzE7zgOkY8vmKVDnPfygXC6oxsHkHUR00EDQymUUz', // Your Stripe secret API key\r\n//             })\r\n        \r\n//         setPaying(false);\r\n\r\n//         if (paymentIntent) {\r\n//             createOrder({ userId: user._id, cart: user.cart, address, country }).then((res) => {\r\n//                 if (!isLoading && !isError) {\r\n//                     setAlertMessage(`Payment ${paymentIntent.status}`);\r\n//                     setTimeout(() => {\r\n//                         navigate(\"/orders\");\r\n//                     }, 3000);\r\n//                 }\r\n//             });\r\n//         }\r\n//     }\r\n\r\n//     return (\r\n//         <Col className=\"cart-payment-container\">\r\n//             <Form onSubmit={handlePay}>\r\n//                 <Row>\r\n//                     {alertMessage && <Alert>{alertMessage}</Alert>}\r\n//                     <Col md={6}>\r\n//                         <Form.Group className=\"mb-3\">\r\n//                             <Form.Label>First Name</Form.Label>\r\n//                             <Form.Control type=\"text\" placeholder=\"First Name\" value={user.name} disabled />\r\n//                         </Form.Group>\r\n//                     </Col>\r\n//                     <Col md={6}>\r\n//                         <Form.Group className=\"mb-3\">\r\n//                             <Form.Label>Email</Form.Label>\r\n//                             <Form.Control type=\"text\" placeholder=\"Email\" value={user.email} disabled />\r\n//                         </Form.Group>\r\n//                     </Col>\r\n//                 </Row>\r\n//                 <Row>\r\n//                     <Col md={7}>\r\n//                         <Form.Group className=\"mb-3\">\r\n//                             <Form.Label>Address</Form.Label>\r\n//                             <Form.Control type=\"text\" placeholder=\"Address\" value={address} onChange={(e) => setAddress(e.target.value)} required />\r\n//                         </Form.Group>\r\n//                     </Col>\r\n//                     <Col md={5}>\r\n//                         <Form.Group className=\"mb-3\">\r\n//                             <Form.Label>Country</Form.Label>\r\n//                             <Form.Control type=\"text\" placeholder=\"Country\" value={country} onChange={(e) => setCountry(e.target.value)} required />\r\n//                         </Form.Group>\r\n//                     </Col>\r\n//                 </Row>\r\n//                 <label htmlFor=\"card-element\">Card</label>\r\n//                 <CardElement id=\"card-element\" />\r\n//                 <Button className=\"mt-3\" type=\"submit\" disabled={user.cart.count <= 0 || paying || isSuccess}>\r\n//                     {paying ? \"Processing...\" : \"Pay\"}\r\n//                 </Button>\r\n//             </Form>\r\n//         </Col>\r\n//     );\r\n// }\r\n\r\n// export default CheckoutForm;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}